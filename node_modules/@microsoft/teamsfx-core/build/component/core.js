"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeamsfxCore = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path_1 = tslib_1.__importDefault(require("path"));
require("reflect-metadata");
const typedi_1 = require("typedi");
const projectSettingsLoader_1 = require("../core/middleware/projectSettingsLoader");
const question_1 = require("../core/question");
const projectSettingsHelper_1 = require("./../common/projectSettingsHelper");
require("./bicep");
require("./debug");
require("./envManager");
require("./resource/appManifest/appManifest");
require("./resource/azureSql");
require("./resource/aad");
require("./resource/azureAppService/azureFunction");
require("./resource/azureStorage");
require("./resource/azureAppService/azureWebApp");
require("./resource/botService");
require("./resource/spfx");
require("./feature/bot");
require("./feature/sql");
require("./feature/tab");
require("./feature/cicd");
require("./feature/apiConnector");
require("./code/botCode");
require("./code/tabCode");
require("./code/apiCode");
require("./connection/aadConfig");
require("./connection/azureWebAppConfig");
require("./connection/azureFunctionConfig");
const projectSettingsManager_1 = require("./projectSettingsManager");
const constants_1 = require("./constants");
const localizeUtils_1 = require("../common/localizeUtils");
const tools_1 = require("../common/tools");
const workflow_1 = require("./workflow");
const preDeployAction_1 = require("./fx/preDeployAction");
const preProvisionAction_1 = require("./fx/preProvisionAction");
let TeamsfxCore = class TeamsfxCore {
    constructor() {
        this.name = "fx";
    }
    init(context, inputs) {
        const initProjectSettings = {
            type: "function",
            name: "fx.initConfig",
            plan: (context, inputs) => {
                return teamsfx_api_1.ok([
                    {
                        type: "file",
                        operate: "create",
                        filePath: projectSettingsLoader_1.getProjectSettingsPath(inputs.projectPath),
                    },
                ]);
            },
            question: (context, inputs) => {
                const question = {
                    type: "text",
                    name: "app-name",
                    title: "Application name",
                    validation: {
                        pattern: question_1.ProjectNamePattern,
                        maxLength: 30,
                    },
                    placeholder: "Application name",
                };
                return teamsfx_api_1.ok(new teamsfx_api_1.QTreeNode(question));
            },
            execute: async (context, inputs) => {
                const projectSettings = projectSettingsHelper_1.newProjectSettings();
                projectSettings.appName = inputs["app-name"];
                projectSettings.components = [];
                context.projectSetting = projectSettings;
                await fs_extra_1.default.ensureDir(inputs.projectPath);
                await fs_extra_1.default.ensureDir(path_1.default.join(inputs.projectPath, `.${teamsfx_api_1.ConfigFolderName}`));
                await fs_extra_1.default.ensureDir(path_1.default.join(inputs.projectPath, `.${teamsfx_api_1.ConfigFolderName}`, "configs"));
                return teamsfx_api_1.ok([
                    {
                        type: "file",
                        operate: "create",
                        filePath: projectSettingsLoader_1.getProjectSettingsPath(inputs.projectPath),
                    },
                ]);
            },
        };
        const action = {
            type: "group",
            name: "fx.init",
            actions: [
                initProjectSettings,
                {
                    type: "call",
                    targetAction: "app-manifest.init",
                    required: true,
                },
                {
                    type: "call",
                    targetAction: "env-manager.create",
                    required: true,
                },
                projectSettingsManager_1.WriteProjectSettingsAction,
            ],
        };
        return teamsfx_api_1.ok(action);
    }
    async provision(context, inputs) {
        const ctx = context;
        const filePath = projectSettingsLoader_1.getProjectSettingsPath(inputs.projectPath);
        ctx.projectSetting = (await fs_extra_1.default.readJson(filePath));
        const resourcesToProvision = ctx.projectSetting.components.filter((r) => r.provision);
        const provisionActions = resourcesToProvision.map((r) => {
            return {
                type: "call",
                name: `call:${r.name}.provision`,
                required: false,
                targetAction: `${r.name}.provision`,
            };
        });
        const configureActions = resourcesToProvision.map((r) => {
            return {
                type: "call",
                name: `call:${r.name}.configure`,
                required: false,
                targetAction: `${r.name}.configure`,
            };
        });
        const setupLocalEnvironmentStep = {
            type: "call",
            name: "call debug.setupLocalEnvInfo",
            targetAction: "debug.setupLocalEnvInfo",
            required: false,
        };
        const configLocalEnvironmentStep = {
            type: "call",
            name: "call debug.configLocalEnvInfo",
            targetAction: "debug.configLocalEnvInfo",
            required: false,
        };
        const preProvisionStep = new preProvisionAction_1.FxPreProvisionAction();
        const createTeamsAppStep = {
            type: "call",
            name: "call app-manifest.provision",
            targetAction: "app-manifest.provision",
            required: true,
        };
        const updateTeamsAppStep = {
            type: "call",
            name: "call app-manifest.configure",
            targetAction: "app-manifest.configure",
            required: true,
        };
        const provisionResourcesStep = {
            type: "group",
            name: "resources.provision",
            mode: "parallel",
            actions: provisionActions,
        };
        const configureResourcesStep = {
            type: "group",
            name: "resources.configure",
            mode: "parallel",
            actions: configureActions,
        };
        const deployBicepStep = {
            type: "call",
            name: "call:bicep.deploy",
            required: true,
            targetAction: "bicep.deploy",
        };
        const postProvisionStep = {
            type: "function",
            name: "fx.postProvision",
            plan: (context, inputs) => {
                return teamsfx_api_1.ok([]);
            },
            execute: (context, inputs) => {
                const ctx = context;
                ctx.envInfo.state.solution.provisionSucceeded = true;
                const url = tools_1.getResourceGroupInPortal(ctx.envInfo.state.solution.subscriptionId, ctx.envInfo.state.solution.tenantId, ctx.envInfo.state.solution.resourceGroupName);
                const msg = localizeUtils_1.getLocalizedString("core.provision.successAzure");
                if (url) {
                    const title = "View Provisioned Resources";
                    ctx.userInteraction.showMessage("info", msg, false, title).then((result) => {
                        const userSelected = result.isOk() ? result.value : undefined;
                        if (userSelected === title) {
                            ctx.userInteraction.openUrl(url);
                        }
                    });
                }
                else {
                    ctx.userInteraction.showMessage("info", msg, false);
                }
                return teamsfx_api_1.ok([]);
            },
        };
        const preConfigureStep = {
            type: "function",
            name: "fx.preConfigure",
            plan: (context, inputs) => {
                return teamsfx_api_1.ok([]);
            },
            execute: (context, inputs) => {
                const ctx = context;
                const teamsTab = workflow_1.getComponent(ctx.projectSetting, constants_1.ComponentNames.TeamsTab);
                if (teamsTab) {
                    const aad = workflow_1.getComponent(ctx.projectSetting, constants_1.ComponentNames.AadApp);
                    if (aad) {
                        const tabEndpoint = ctx.envInfo.state[constants_1.ComponentNames.TeamsTab].endpoint;
                        inputs.m365ApplicationIdUri = `api://${tabEndpoint}`;
                    }
                }
                return teamsfx_api_1.ok([]);
            },
        };
        const provisionSequences = [
            preProvisionStep,
            createTeamsAppStep,
            provisionResourcesStep,
            ctx.envInfo.envName !== "local" ? deployBicepStep : setupLocalEnvironmentStep,
            preConfigureStep,
            configureResourcesStep,
            ctx.envInfo.envName === "local" ? configLocalEnvironmentStep : postProvisionStep,
            updateTeamsAppStep,
        ];
        const result = {
            name: "fx.provision",
            type: "group",
            actions: provisionSequences,
        };
        return teamsfx_api_1.ok(result);
    }
    build(context, inputs) {
        const projectSettings = context.projectSetting;
        const actions = projectSettings.components
            .filter((resource) => resource.build)
            .map((resource) => {
            const component = resource.code || resource.name;
            return {
                name: `call:${component}.build`,
                type: "call",
                targetAction: `${component}.build`,
                required: true,
            };
        });
        const group = {
            type: "group",
            name: "fx.build",
            mode: "parallel",
            actions: actions,
        };
        return teamsfx_api_1.ok(group);
    }
    deploy(context, inputs) {
        const projectSettings = context.projectSetting;
        const actions = [
            new preDeployAction_1.FxPreDeployAction(),
            {
                name: "call:fx.build",
                type: "call",
                targetAction: "fx.build",
                required: true,
            },
        ];
        const components = inputs["deploy-plugin"];
        components.forEach((componentName) => {
            const componentConfig = workflow_1.getComponent(projectSettings, componentName);
            if (componentConfig) {
                actions.push({
                    type: "call",
                    targetAction: `${componentConfig.hosting}.deploy`,
                    required: false,
                });
            }
        });
        const action = {
            type: "group",
            name: "fx.deploy",
            actions: actions,
        };
        return teamsfx_api_1.ok(action);
    }
};
TeamsfxCore = tslib_1.__decorate([
    typedi_1.Service("fx")
], TeamsfxCore);
exports.TeamsfxCore = TeamsfxCore;
//# sourceMappingURL=core.js.map