"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sql = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
require("reflect-metadata");
const typedi_1 = require("typedi");
const projectSettingsLoader_1 = require("../../core/middleware/projectSettingsLoader");
const workflow_1 = require("../workflow");
require("../connection/azureWebAppConfig");
require("../resource/azureSql");
require("../resource/identity");
let Sql = class Sql {
    constructor() {
        this.name = "sql";
    }
    /**
     * 1. config sql
     * 2. add sql provision bicep
     * 3. add identity provision bicep
     * 4. re-generate resources that connect to sql
     * 5. persist bicep
     */
    add(context, inputs) {
        const sqlComponent = workflow_1.getComponent(context.projectSetting, "azure-sql");
        const provisionType = sqlComponent ? "database" : "server";
        const actions = [
            // LoadProjectSettingsAction,
            {
                name: "sql.configSql",
                type: "function",
                plan: (context, inputs) => {
                    const sqlComponent = workflow_1.getComponent(context.projectSetting, "azure-sql");
                    if (sqlComponent) {
                        return teamsfx_api_1.ok([]);
                    }
                    const remarks = ["add component 'azure-sql' in projectSettings"];
                    const identityComponent = workflow_1.getComponent(context.projectSetting, "identity");
                    if (!identityComponent) {
                        remarks.push("add component 'identity' in projectSettings");
                    }
                    const webAppComponent = workflow_1.getComponent(context.projectSetting, "azure-web-app");
                    if (webAppComponent) {
                        remarks.push("connect 'azure-sql' to component 'azure-web-app' in projectSettings");
                    }
                    const functionComponent = workflow_1.getComponent(context.projectSetting, "azure-function");
                    if (functionComponent) {
                        remarks.push("connect 'azure-sql' to component 'azure-function' in projectSettings");
                    }
                    return teamsfx_api_1.ok([
                        {
                            type: "file",
                            operate: "replace",
                            filePath: projectSettingsLoader_1.getProjectSettingsPath(inputs.projectPath),
                            remarks: remarks.join(";"),
                        },
                    ]);
                },
                execute: async (context, inputs) => {
                    const sqlComponent = workflow_1.getComponent(context.projectSetting, "azure-sql");
                    if (sqlComponent)
                        return teamsfx_api_1.ok([]);
                    const projectSettings = context.projectSetting;
                    const remarks = ["add component 'azure-sql' in projectSettings"];
                    projectSettings.components.push({
                        name: "azure-sql",
                        provision: true,
                    });
                    const identityComponent = workflow_1.getComponent(context.projectSetting, "identity");
                    if (!identityComponent) {
                        projectSettings.components.push({
                            name: "identity",
                            provision: true,
                        });
                        remarks.push("add component 'identity' in projectSettings");
                    }
                    const webAppComponent = workflow_1.getComponent(context.projectSetting, "azure-web-app");
                    if (webAppComponent) {
                        if (!webAppComponent.connections)
                            webAppComponent.connections = [];
                        webAppComponent.connections.push("azure-sql");
                        remarks.push("connect 'azure-sql' to component 'azure-web-app' in projectSettings");
                    }
                    const functionComponent = workflow_1.getComponent(context.projectSetting, "azure-function");
                    if (functionComponent) {
                        if (!functionComponent.connections)
                            functionComponent.connections = [];
                        functionComponent.connections.push("azure-sql");
                        remarks.push("connect 'azure-sql' to component 'azure-function' in projectSettings");
                    }
                    return teamsfx_api_1.ok([
                        {
                            type: "file",
                            operate: "replace",
                            filePath: projectSettingsLoader_1.getProjectSettingsPath(inputs.projectPath),
                            remarks: remarks.join(";"),
                        },
                    ]);
                },
            },
            {
                type: "call",
                targetAction: "bicep.init",
                required: true,
            },
            {
                name: "call:azure-sql.generateBicep",
                type: "call",
                required: true,
                targetAction: "azure-sql.generateBicep",
                inputs: {
                    provisionType: provisionType,
                },
            },
        ];
        const identityComponent = workflow_1.getComponent(context.projectSetting, "identity");
        if (!identityComponent) {
            actions.push({
                name: "call:identity.generateBicep",
                type: "call",
                required: true,
                targetAction: "identity.generateBicep",
            });
        }
        const webAppComponent = workflow_1.getComponent(context.projectSetting, "azure-web-app");
        if (webAppComponent) {
            actions.push({
                name: "call:azure-web-app-config.generateBicep",
                type: "call",
                required: true,
                targetAction: "azure-web-app-config.generateBicep",
            });
        }
        const functionComponent = workflow_1.getComponent(context.projectSetting, "azure-function");
        if (functionComponent) {
            actions.push({
                name: "call:azure-function-config.generateBicep",
                type: "call",
                required: true,
                targetAction: "azure-function-config.generateBicep",
            });
        }
        const group = {
            type: "group",
            name: "sql.add",
            mode: "sequential",
            actions: actions,
        };
        return teamsfx_api_1.ok(group);
    }
};
Sql = tslib_1.__decorate([
    typedi_1.Service("sql")
], Sql);
exports.Sql = Sql;
//# sourceMappingURL=sql.js.map