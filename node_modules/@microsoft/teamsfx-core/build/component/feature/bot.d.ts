import { Action, ContextV3, FxError, InputsWithProjectPath, MaybePromise, Result } from "@microsoft/teamsfx-api";
import "reflect-metadata";
import "../code/botCode";
import "../resource/appManifest/appManifest";
import "../resource/botService";
import "../resource/azureAppService/azureWebApp";
import "../connection/azureWebAppConfig";
export declare class TeamsBot {
    name: string;
    /**
     *
     *   capability = Notification
     *     bot-host-type-trigger = http-restify
     *       group=bot, scenario=notification-restify, host=app-service
     *     bot-host-type-trigger = [http-functions, timer-functions]
     *       group=bot, host=function, scenario=notification-function-base + [notification-trigger-http, notification-trigger-timer]
     *   capability = command-bot:
     *     group=bot, host=app-service, scenario=command-and-response
     *   capability = Bot
     *     group=bot, host=app-service, scenario=default
     *   capability = MessagingExtension
     *     group=bot, host=app-service, scenario=default
     */
    /**
     * 1. config bot in project settings
     * 2. generate bot source code
     * 3. generate bot-service and hosting bicep
     * 3. overwrite hosting config bicep
     * 4. persist bicep
     * 5. add capability in teams manifest
     */
    add(context: ContextV3, inputs: InputsWithProjectPath): MaybePromise<Result<Action | undefined, FxError>>;
    build(context: ContextV3, inputs: InputsWithProjectPath): MaybePromise<Result<Action | undefined, FxError>>;
}
//# sourceMappingURL=bot.d.ts.map