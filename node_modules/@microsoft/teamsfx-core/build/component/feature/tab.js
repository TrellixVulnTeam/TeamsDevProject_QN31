"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeamsfxCore = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
require("reflect-metadata");
const typedi_1 = require("typedi");
const question_1 = require("../../core/question");
const constants_1 = require("../constants");
const projectSettingsManager_1 = require("../projectSettingsManager");
let TeamsfxCore = class TeamsfxCore {
    constructor() {
        this.name = "teams-tab";
    }
    add(context, inputs) {
        inputs.hosting =
            inputs.hosting ||
                ((inputs === null || inputs === void 0 ? void 0 : inputs["programming-language"]) === "csharp"
                    ? constants_1.ComponentNames.AzureWebApp
                    : constants_1.ComponentNames.AzureStorage);
        const actions = [
            projectSettingsManager_1.LoadProjectSettingsAction,
            {
                name: "fx.configTab",
                type: "function",
                plan: (context, inputs) => {
                    return teamsfx_api_1.ok(["config 'teams-tab' in projectSettings"]);
                },
                execute: async (context, inputs) => {
                    const projectSettings = context.projectSetting;
                    // add teams-tab
                    projectSettings.components.push({
                        name: "teams-tab",
                        hosting: inputs.hosting,
                    });
                    // add hosting component
                    projectSettings.components.push({
                        name: inputs.hosting,
                        connections: ["teams-tab"],
                        provision: true,
                    });
                    projectSettings.programmingLanguage = inputs[question_1.CoreQuestionNames.ProgrammingLanguage];
                    return teamsfx_api_1.ok(["config 'teams-tab' in projectSettings"]);
                },
            },
            {
                name: "call:tab-code.generate",
                type: "call",
                required: true,
                targetAction: "tab-code.generate",
            },
            {
                type: "call",
                targetAction: "bicep.init",
                required: true,
            },
            {
                name: `call:${inputs.hosting}.generateBicep`,
                type: "call",
                required: true,
                targetAction: `${inputs.hosting}.generateBicep`,
                inputs: {
                    componentId: this.name,
                    componentName: "Tab",
                },
            },
            {
                name: "call:app-manifest.addCapability",
                type: "call",
                required: true,
                targetAction: "app-manifest.addCapability",
                inputs: {
                    capabilities: [{ name: "staticTab" }, { name: "configurableTab" }],
                },
            },
            // TODO: connect AAD for blazor web app
            {
                name: "call:debug.generateLocalDebugSettings",
                type: "call",
                required: true,
                targetAction: "debug.generateLocalDebugSettings",
            },
            projectSettingsManager_1.WriteProjectSettingsAction,
        ];
        const group = {
            type: "group",
            name: "teams-tab.add",
            mode: "sequential",
            actions: actions,
        };
        return teamsfx_api_1.ok(group);
    }
    configure(context, inputs) {
        const action = {
            name: "teams-tab.configure",
            type: "call",
            targetAction: "tab-code.configure",
            required: true,
        };
        return teamsfx_api_1.ok(action);
    }
    build(context, inputs) {
        const action = {
            name: "teams-tab.build",
            type: "call",
            targetAction: "tab-code.build",
            required: true,
        };
        return teamsfx_api_1.ok(action);
    }
};
TeamsfxCore = tslib_1.__decorate([
    typedi_1.Service("teams-tab")
], TeamsfxCore);
exports.TeamsfxCore = TeamsfxCore;
//# sourceMappingURL=tab.js.map