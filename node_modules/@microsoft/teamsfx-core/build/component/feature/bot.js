"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeamsBot = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
require("reflect-metadata");
const typedi_1 = require("typedi");
const projectSettingsLoader_1 = require("../../core/middleware/projectSettingsLoader");
const question_1 = require("../../plugins/solution/fx-solution/question");
const constants_1 = require("../../plugins/resource/bot/constants");
const question_2 = require("../../plugins/resource/bot/question");
const projectSettingsManager_1 = require("../projectSettingsManager");
const workflow_1 = require("../workflow");
const question_3 = require("../../core/question");
require("../code/botCode");
require("../resource/appManifest/appManifest");
require("../resource/botService");
require("../resource/azureAppService/azureWebApp");
require("../connection/azureWebAppConfig");
let TeamsBot = class TeamsBot {
    constructor() {
        this.name = "teams-bot";
    }
    /**
     *
     *   capability = Notification
     *     bot-host-type-trigger = http-restify
     *       group=bot, scenario=notification-restify, host=app-service
     *     bot-host-type-trigger = [http-functions, timer-functions]
     *       group=bot, host=function, scenario=notification-function-base + [notification-trigger-http, notification-trigger-timer]
     *   capability = command-bot:
     *     group=bot, host=app-service, scenario=command-and-response
     *   capability = Bot
     *     group=bot, host=app-service, scenario=default
     *   capability = MessagingExtension
     *     group=bot, host=app-service, scenario=default
     */
    /**
     * 1. config bot in project settings
     * 2. generate bot source code
     * 3. generate bot-service and hosting bicep
     * 3. overwrite hosting config bicep
     * 4. persist bicep
     * 5. add capability in teams manifest
     */
    add(context, inputs) {
        const feature = inputs.feature;
        const triggers = inputs[constants_1.QuestionNames.BOT_HOST_TYPE_TRIGGER];
        inputs.hosting = "azure-web-app";
        const scenarios = [];
        if (feature === question_1.NotificationOptionItem.id) {
            if (triggers.includes(question_2.AppServiceOptionItem.id)) {
                scenarios.push(constants_1.TemplateProjectsScenarios.NOTIFICATION_RESTIFY_SCENARIO_NAME);
            }
            else if (triggers.includes(question_2.AppServiceOptionItemForVS.id)) {
                scenarios.push(constants_1.TemplateProjectsScenarios.NOTIFICATION_WEBAPI_SCENARIO_NAME);
            }
            else {
                inputs.hosting = "azure-function";
                scenarios.push(constants_1.TemplateProjectsScenarios.NOTIFICATION_FUNCTION_BASE_SCENARIO_NAME);
                if (triggers.includes(question_2.FunctionsHttpTriggerOptionItem.id)) {
                    scenarios.push(constants_1.TemplateProjectsScenarios.NOTIFICATION_FUNCTION_TRIGGER_HTTP_SCENARIO_NAME);
                }
                if (triggers.includes(question_2.FunctionsTimerTriggerOptionItem.id)) {
                    scenarios.push(constants_1.TemplateProjectsScenarios.NOTIFICATION_FUNCTION_TRIGGER_TIMER_SCENARIO_NAME);
                }
            }
        }
        else if (feature === question_1.CommandAndResponseOptionItem.id) {
            scenarios.push(constants_1.TemplateProjectsScenarios.COMMAND_AND_RESPONSE_SCENARIO_NAME);
        }
        else {
            scenarios.push(constants_1.TemplateProjectsScenarios.DEFAULT_SCENARIO_NAME);
        }
        const actions = [
            projectSettingsManager_1.LoadProjectSettingsAction,
            {
                name: "fx.configBot",
                type: "function",
                plan: (context, inputs) => {
                    const remarks = [
                        `add components 'teams-bot', '${inputs.hosting}', 'bot-service' in projectSettings`,
                    ];
                    // connect to azure-sql
                    if (workflow_1.getComponent(context.projectSetting, "azure-sql")) {
                        remarks.push(`connect 'azure-sql' to hosting component '${inputs.hosting}' in projectSettings`);
                    }
                    return teamsfx_api_1.ok(remarks);
                },
                execute: async (context, inputs) => {
                    const projectSettings = context.projectSetting;
                    // add teams-bot
                    projectSettings.components.push({
                        name: "teams-bot",
                        hosting: inputs.hosting,
                    });
                    // add hosting component
                    const hostingComponent = {
                        name: inputs.hosting,
                        connections: ["teams-bot"],
                    };
                    projectSettings.components.push(hostingComponent);
                    //add bot-service
                    projectSettings.components.push({
                        name: "bot-service",
                        provision: true,
                    });
                    const remarks = [
                        `add components 'teams-bot', '${inputs.hosting}', 'bot-service' in projectSettings`,
                    ];
                    // connect azure-sql to hosting component
                    if (workflow_1.getComponent(context.projectSetting, "azure-sql")) {
                        hostingComponent.connections.push("azure-sql");
                        remarks.push(`connect 'azure-sql' to hosting component '${inputs.hosting}' in projectSettings`);
                    }
                    projectSettings.programmingLanguage = inputs[question_3.CoreQuestionNames.ProgrammingLanguage];
                    return teamsfx_api_1.ok([
                        {
                            type: "file",
                            operate: "replace",
                            filePath: projectSettingsLoader_1.getProjectSettingsPath(inputs.projectPath),
                            remarks: remarks.join(";"),
                        },
                    ]);
                },
            },
            {
                name: "call:bot-code.generate",
                type: "call",
                required: true,
                targetAction: "bot-code.generate",
                inputs: {
                    scenarios: scenarios,
                },
            },
            {
                type: "call",
                targetAction: "bicep.init",
                required: true,
            },
            {
                name: `call:${inputs.hosting}.generateBicep`,
                type: "call",
                required: true,
                targetAction: `${inputs.hosting}.generateBicep`,
                inputs: {
                    componentId: this.name,
                    componentName: "Bot",
                },
            },
            {
                name: "call:bot-service.generateBicep",
                type: "call",
                required: true,
                targetAction: "bot-service.generateBicep",
                inputs: {
                    componentId: this.name,
                    componentName: "Bot",
                },
            },
            {
                name: `call:${inputs.hosting}-config.generateBicep`,
                type: "call",
                required: true,
                targetAction: `${inputs.hosting}-config.generateBicep`,
                inputs: {
                    componentId: this.name,
                    componentName: "Bot",
                },
            },
            {
                name: "call:app-manifest.addCapability",
                type: "call",
                required: true,
                targetAction: "app-manifest.addCapability",
                inputs: {
                    capabilities: [{ name: "Bot" }],
                },
            },
            {
                name: "call:debug.generateLocalDebugSettings",
                type: "call",
                required: true,
                targetAction: "debug.generateLocalDebugSettings",
            },
            projectSettingsManager_1.WriteProjectSettingsAction,
        ];
        const group = {
            type: "group",
            name: "teams-bot.add",
            mode: "sequential",
            actions: actions,
        };
        return teamsfx_api_1.ok(group);
    }
    build(context, inputs) {
        const action = {
            name: "teams-bot.build",
            type: "call",
            targetAction: "bot-code.build",
            required: true,
        };
        return teamsfx_api_1.ok(action);
    }
};
TeamsBot = tslib_1.__decorate([
    typedi_1.Service("teams-bot")
], TeamsBot);
exports.TeamsBot = TeamsBot;
//# sourceMappingURL=bot.js.map