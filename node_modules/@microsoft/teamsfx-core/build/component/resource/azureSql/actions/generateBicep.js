"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetActionGenerateBicep = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const path = tslib_1.__importStar(require("path"));
const common_1 = require("../../../../common");
const folder_1 = require("../../../../folder");
const constants_1 = require("../../../constants");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
function GetActionGenerateBicep() {
    return {
        name: `${constants_1.ComponentNames.AzureSQL}.${constants_1.ActionNames.generateBicep}`,
        type: constants_1.ActionTypeFunction,
        plan: async (context, inputs) => {
            const bicep = {
                type: "bicep",
                Provision: {
                    Modules: { azureSql: constants_1.BicepConstants.writeFile },
                    Orchestration: constants_1.BicepConstants.writeFile,
                },
                Parameters: {},
            };
            return teamsfx_api_1.ok([bicep]);
        },
        execute: async (context, inputs) => {
            const prefix = inputs.provisionType === "database"
                ? "azureSql.provisionDatabase"
                : "azureSql.provisionServer";
            const mPath = path.join(folder_1.getTemplatesFolder(), "bicep", `${prefix}.module.bicep`);
            const oPath = path.join(folder_1.getTemplatesFolder(), "bicep", `${prefix}.orchestration.bicep`);
            let module = await fs_extra_1.default.readFile(mPath, "utf-8");
            let orch = await fs_extra_1.default.readFile(oPath, "utf-8");
            const suffix = common_1.getUuid().substring(0, 6);
            const compileCtx = {
                suffix: suffix,
            };
            if (inputs.provisionType === "database") {
                module = await common_1.generateBicepFromFile(mPath, compileCtx);
                orch = await common_1.generateBicepFromFile(oPath, compileCtx);
            }
            const bicep = {
                type: "bicep",
                Provision: {
                    Modules: { azureSql: module },
                    Orchestration: orch,
                },
            };
            if (inputs.provisionType === "server") {
                bicep.Parameters = await fs_extra_1.default.readJson(path.join(folder_1.getTemplatesFolder(), "bicep", "azureSql.parameters.json"));
            }
            return teamsfx_api_1.ok([bicep]);
        },
    };
}
exports.GetActionGenerateBicep = GetActionGenerateBicep;
//# sourceMappingURL=generateBicep.js.map