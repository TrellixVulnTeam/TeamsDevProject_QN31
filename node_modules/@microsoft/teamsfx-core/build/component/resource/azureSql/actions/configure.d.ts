import { ContextV3, InputsWithProjectPath, FunctionAction, ProvisionContextV3, v3, AzureAccountProvider, LogProvider, Result, FxError, Effect, QTreeNode } from "@microsoft/teamsfx-api";
import { ManagementClient } from "../clients/management";
import { SqlClient } from "../clients/sql";
import { TokenInfo } from "../utils/common";
export declare class ConfigureActionImplement {
    static readonly source = "SQL";
    static readonly stage = "post-provision";
    static readonly telemetryComponentName = "fx-resource-azure-sql";
    static readonly progressTitle = "Configuring SQL";
    static readonly progressMessage: {
        addAadmin: string;
        addUser: string;
    };
    static readonly loggerPrefix = "[SQL Component]";
    static readonly logFormatter: (message: string) => string;
    static execute(context: ContextV3, inputs: InputsWithProjectPath): Promise<Result<Effect[], FxError>>;
    static get(): FunctionAction;
}
export declare class UtilFunctions {
    static CheckAndSetAadAdmin(client: ManagementClient, aadAdmin: string, objectId: string, tenantId: string): Promise<boolean>;
    static parseLoginToken(azureAccountProvider: AzureAccountProvider): Promise<TokenInfo>;
    static getSkipAddingUser(config: v3.AzureSolutionConfig, azureAccountProvider: AzureAccountProvider): Promise<boolean>;
    static getIdentity(ctx: ProvisionContextV3): string;
    static addDatabaseUser(logProvider: LogProvider, sqlClient: SqlClient, managementClient: ManagementClient): Promise<void>;
    static buildQuestionNode(): QTreeNode;
}
//# sourceMappingURL=configure.d.ts.map