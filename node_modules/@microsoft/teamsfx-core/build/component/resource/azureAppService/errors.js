"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackDirectoryExistenceError = exports.CheckThrowSomethingMissing = exports.UnzipError = exports.TemplateZipFallbackError = exports.PreconditionError = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const messages_1 = require("./messages");
class PreconditionError extends teamsfx_api_1.UserError {
    constructor(source, messages, suggestions) {
        super(source, new.target.name, `${messages[0]}. Suggestions: ${suggestions.join(" ")}`, `${messages[1]}. Suggestions: ${suggestions.join(" ")}`);
    }
}
exports.PreconditionError = PreconditionError;
class TemplateZipFallbackError extends teamsfx_api_1.UserError {
    constructor(source) {
        super(source, new.target.name, `Failed to download zip package and open local zip package. Suggestions: ${[
            messages_1.Messages.CheckOutputLogAndTryToFix,
            messages_1.Messages.RetryTheCurrentStep,
        ].join(" ")}`);
    }
}
exports.TemplateZipFallbackError = TemplateZipFallbackError;
class UnzipError extends teamsfx_api_1.UserError {
    constructor(source, path) {
        super(source, new.target.name, `Failed to unzip templates and write to disk. Suggestions: ${[
            messages_1.Messages.CheckOutputLogAndTryToFix,
            messages_1.Messages.ReopenWorkingDir(path),
            messages_1.Messages.RetryTheCurrentStep,
        ].join(" ")}`);
    }
}
exports.UnzipError = UnzipError;
function CheckThrowSomethingMissing(source, name, value) {
    if (!value) {
        throw new PreconditionError(source, messages_1.Messages.SomethingIsMissing(name), [
            messages_1.Messages.RetryTheCurrentStep,
        ]);
    }
    return value;
}
exports.CheckThrowSomethingMissing = CheckThrowSomethingMissing;
class PackDirectoryExistenceError extends teamsfx_api_1.UserError {
    constructor(source) {
        const msg0 = `${messages_1.Messages.SomethingIsNotExisting("pack directory")[0]} Suggestions: ${[
            messages_1.Messages.RecreateTheProject[0],
        ].join(" ")}`;
        const msg1 = `${messages_1.Messages.SomethingIsNotExisting("pack directory")[1]} Suggestions: ${[
            messages_1.Messages.RecreateTheProject[1],
        ].join(" ")}`;
        super(source, new.target.name, msg0, msg1);
    }
}
exports.PackDirectoryExistenceError = PackDirectoryExistenceError;
//# sourceMappingURL=errors.js.map