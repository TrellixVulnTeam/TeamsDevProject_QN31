"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAzureAccountCredential = exports.createBotRegInAppStudio = exports.createBotAAD = exports.BotService = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
require("reflect-metadata");
const typedi_1 = require("typedi");
const tools_1 = require("../../common/tools");
const strings_1 = require("../../plugins/resource/bot/resources/strings");
const error_1 = require("../../plugins/resource/bot/v3/error");
const uuid = tslib_1.__importStar(require("uuid"));
const resourceNameFactory_1 = require("../../plugins/resource/bot/utils/resourceNameFactory");
const constants_1 = require("../../plugins/resource/bot/constants");
const aadRegistration_1 = require("../../plugins/resource/bot/aadRegistration");
const messages_1 = require("../../plugins/resource/bot/resources/messages");
const appStudio_1 = require("../../plugins/resource/bot/appStudio/appStudio");
const constants_2 = require("../constants");
const utils_1 = require("../utils");
const workflow_1 = require("../workflow");
const clientFactory = tslib_1.__importStar(require("../../plugins/resource/bot/clientFactory"));
const azureResource_1 = require("./azureResource");
let BotService = class BotService extends azureResource_1.AzureResource {
    constructor() {
        super(...arguments);
        this.outputs = {
            botId: {
                key: "botId",
            },
            botPassword: {
                key: "botPassword",
            },
        };
        this.finalOutputKeys = ["botId", "botPassword"];
        this.secretFields = ["botPassword"];
        this.name = "bot-service";
        this.bicepModuleName = "botService";
    }
    generateBicep(context, inputs) {
        var _a;
        try {
            const resource = typedi_1.Container.get(inputs.hosting);
            this.templateContext.endpointVarName = tools_1.compileHandlebarsTemplateString((_a = resource.outputs.endpoint.bicepVariable) !== null && _a !== void 0 ? _a : "", inputs);
        }
        catch (_b) { }
        // Bot service's component must be Bot, omit it.
        inputs.componentName = "";
        return super.generateBicep(context, inputs);
    }
    provision(context, inputs) {
        const action = {
            name: "bot-service.provision",
            type: "function",
            plan: (context, inputs) => {
                const ctx = context;
                const plans = [];
                if (ctx.envInfo.envName === "local") {
                    plans.push({
                        type: "service",
                        name: "graph.microsoft.com",
                        remarks: "create AAD app for bot service (botId, botPassword)",
                    });
                    plans.push({
                        type: "service",
                        name: "teams.microsoft.com",
                        remarks: "create bot registration",
                    });
                }
                else {
                    plans.push({
                        type: "service",
                        name: "graph.microsoft.com",
                        remarks: "create AAD app for bot service (botId, botPassword)",
                    });
                    plans.push({
                        type: "service",
                        name: "management.azure.com",
                        remarks: "ensure resource providers for: " + constants_1.AzureConstants.requiredResourceProviders,
                    });
                }
                return teamsfx_api_1.ok(plans);
            },
            execute: async (context, inputs) => {
                // create bot aad app by API call
                const ctx = context;
                const plans = [];
                if (ctx.envInfo.envName === "local") {
                    const aadRes = await createBotAAD(ctx);
                    if (aadRes.isErr())
                        return teamsfx_api_1.err(aadRes.error);
                    const botConfig = aadRes.value;
                    const regRes = await createBotRegInAppStudio(botConfig, ctx);
                    if (regRes.isErr())
                        return teamsfx_api_1.err(regRes.error);
                    plans.push({
                        type: "service",
                        name: "graph.microsoft.com",
                        remarks: "create AAD app for bot service (botId, botPassword)",
                    });
                    plans.push({
                        type: "service",
                        name: "teams.microsoft.com",
                        remarks: "create bot registration",
                    });
                }
                else {
                    // Check Resource Provider
                    const azureCredential = await getAzureAccountCredential(ctx.tokenProvider.azureAccountProvider);
                    const solutionConfig = ctx.envInfo.state.solution;
                    const rpClient = clientFactory.createResourceProviderClient(azureCredential, solutionConfig.subscriptionId);
                    await clientFactory.ensureResourceProvider(rpClient, constants_1.AzureConstants.requiredResourceProviders);
                    const aadRes = await createBotAAD(ctx);
                    if (aadRes.isErr())
                        return teamsfx_api_1.err(aadRes.error);
                    plans.push({
                        type: "service",
                        name: "management.azure.com",
                        remarks: "ensure resource providers for: " + constants_1.AzureConstants.requiredResourceProviders,
                    });
                    plans.push({
                        type: "service",
                        name: "graph.microsoft.com",
                        remarks: "create AAD app for bot service (botId, botPassword)",
                    });
                }
                return teamsfx_api_1.ok(plans);
            },
        };
        return teamsfx_api_1.ok(action);
    }
    configure(context, inputs) {
        const action = {
            name: "bot-service.configure",
            type: "function",
            plan: (context, inputs) => {
                const ctx = context;
                const plans = [];
                if (ctx.envInfo.envName === "local") {
                    plans.push({
                        type: "service",
                        name: "graph.microsoft.com",
                        remarks: "update message endpoint in AppStudio",
                    });
                }
                return teamsfx_api_1.ok(plans);
            },
            execute: async (context, inputs) => {
                // create bot aad app by API call
                const ctx = context;
                const teamsBot = workflow_1.getComponent(ctx.projectSetting, constants_2.ComponentNames.TeamsBot);
                if (!teamsBot)
                    return teamsfx_api_1.ok([]);
                const plans = [];
                if (ctx.envInfo.envName === "local") {
                    plans.push({
                        type: "service",
                        name: "graph.microsoft.com",
                        remarks: "update message endpoint in AppStudio",
                    });
                    const teamsBotState = ctx.envInfo.state[constants_2.ComponentNames.TeamsBot];
                    const appStudioTokenRes = await ctx.tokenProvider.m365TokenProvider.getAccessToken({
                        scopes: tools_1.AppStudioScopes,
                    });
                    const appStudioToken = appStudioTokenRes.isOk() ? appStudioTokenRes.value : undefined;
                    error_1.CheckThrowSomethingMissing(strings_1.ConfigNames.LOCAL_ENDPOINT, teamsBotState.endpoint);
                    error_1.CheckThrowSomethingMissing(strings_1.ConfigNames.APPSTUDIO_TOKEN, appStudioToken);
                    error_1.CheckThrowSomethingMissing(strings_1.ConfigNames.LOCAL_BOT_ID, teamsBotState.botId);
                    const botReg = {
                        botId: teamsBotState.botId,
                        name: utils_1.normalizeName(ctx.projectSetting.appName) + strings_1.PluginLocalDebug.LOCAL_DEBUG_SUFFIX,
                        description: "",
                        iconUrl: "",
                        messagingEndpoint: `${teamsBotState.endpoint}${strings_1.CommonStrings.MESSAGE_ENDPOINT_SUFFIX}`,
                        callingEndpoint: "",
                    };
                    await appStudio_1.AppStudio.updateMessageEndpoint(appStudioToken, botReg.botId, botReg);
                }
                return teamsfx_api_1.ok(plans);
            },
        };
        return teamsfx_api_1.ok(action);
    }
};
BotService = tslib_1.__decorate([
    typedi_1.Service("bot-service")
], BotService);
exports.BotService = BotService;
async function createBotAAD(ctx) {
    const graphTokenRes = await ctx.tokenProvider.m365TokenProvider.getAccessToken({
        scopes: tools_1.GraphScopes,
    });
    const graphToken = graphTokenRes.isOk() ? graphTokenRes.value : undefined;
    error_1.CheckThrowSomethingMissing(strings_1.ConfigNames.GRAPH_TOKEN, graphToken);
    error_1.CheckThrowSomethingMissing(strings_1.CommonStrings.SHORT_APP_NAME, ctx.projectSetting.appName);
    ctx.envInfo.state[constants_2.ComponentNames.TeamsBot] = ctx.envInfo.state[constants_2.ComponentNames.TeamsBot] || {};
    const botConfig = ctx.envInfo.state[constants_2.ComponentNames.TeamsBot];
    const botAADCreated = (botConfig === null || botConfig === void 0 ? void 0 : botConfig.botId) !== undefined && (botConfig === null || botConfig === void 0 ? void 0 : botConfig.botPassword) !== undefined;
    if (!botAADCreated) {
        const solutionConfig = ctx.envInfo.state.solution;
        const resourceNameSuffix = solutionConfig.resourceNameSuffix
            ? solutionConfig.resourceNameSuffix
            : uuid.v4();
        const aadDisplayName = resourceNameFactory_1.ResourceNameFactory.createCommonName(resourceNameSuffix, ctx.projectSetting.appName, constants_1.MaxLengths.AAD_DISPLAY_NAME);
        const botAuthCredentials = await aadRegistration_1.AADRegistration.registerAADAppAndGetSecretByGraph(graphToken, aadDisplayName, botConfig.objectId, botConfig.botId);
        botConfig.botId = botAuthCredentials.clientId;
        botConfig.botPassword = botAuthCredentials.clientSecret;
        botConfig.objectId = botAuthCredentials.objectId;
        ctx.logProvider.info(messages_1.Messages.SuccessfullyCreatedBotAadApp);
    }
    return teamsfx_api_1.ok(botConfig);
}
exports.createBotAAD = createBotAAD;
async function createBotRegInAppStudio(botConfig, ctx) {
    // 2. Register bot by app studio.
    const botReg = {
        botId: botConfig.botId,
        name: utils_1.normalizeName(ctx.projectSetting.appName) + strings_1.PluginLocalDebug.LOCAL_DEBUG_SUFFIX,
        description: "",
        iconUrl: "",
        messagingEndpoint: "",
        callingEndpoint: "",
    };
    ctx.logProvider.info(messages_1.Messages.ProvisioningBotRegistration);
    const appStudioTokenRes = await ctx.tokenProvider.m365TokenProvider.getAccessToken({
        scopes: tools_1.AppStudioScopes,
    });
    const appStudioToken = appStudioTokenRes.isOk() ? appStudioTokenRes.value : undefined;
    error_1.CheckThrowSomethingMissing(strings_1.ConfigNames.APPSTUDIO_TOKEN, appStudioToken);
    await appStudio_1.AppStudio.createBotRegistration(appStudioToken, botReg);
    ctx.logProvider.info(messages_1.Messages.SuccessfullyProvisionedBotRegistration);
    return teamsfx_api_1.ok(undefined);
}
exports.createBotRegInAppStudio = createBotRegInAppStudio;
async function getAzureAccountCredential(tokenProvider) {
    const serviceClientCredentials = await tokenProvider.getAccountCredentialAsync();
    if (!serviceClientCredentials) {
        throw new error_1.PreconditionError(messages_1.Messages.FailToGetAzureCreds, [messages_1.Messages.TryLoginAzure]);
    }
    return serviceClientCredentials;
}
exports.getAzureAccountCredential = getAzureAccountCredential;
//# sourceMappingURL=botService.js.map