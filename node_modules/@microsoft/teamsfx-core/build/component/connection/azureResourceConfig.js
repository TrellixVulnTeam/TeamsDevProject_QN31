"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AzureResourceConfig = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
require("reflect-metadata");
const typedi_1 = require("typedi");
const path = tslib_1.__importStar(require("path"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const folder_1 = require("../../folder");
const workflow_1 = require("../workflow");
const tools_1 = require("../../common/tools");
const utils_1 = require("../../common/utils");
class AzureResourceConfig {
    constructor() {
        this.templateContext = {};
    }
    generateBicep(context, inputs) {
        const action = {
            name: `${this.name}.generateBicep`,
            type: "function",
            plan: async (context, inputs) => {
                const bicep = {
                    type: "bicep",
                    Configuration: {
                        Modules: { [`${this.bicepModuleName}Config`]: "1" },
                        Orchestration: "1",
                    },
                };
                return teamsfx_api_1.ok([bicep]);
            },
            execute: async (context, inputs) => {
                var _a, _b;
                const update = inputs.update;
                const requisiteComponent = workflow_1.getComponent(context.projectSetting, this.requisite);
                if (!requisiteComponent)
                    return teamsfx_api_1.ok([]);
                this.templateContext.connections = requisiteComponent.connections || [];
                for (const ref of this.references) {
                    this.templateContext[ref] = { outputs: {} };
                    try {
                        const refResource = typedi_1.Container.get(ref);
                        if (refResource.outputs) {
                            for (const key of Object.keys(refResource.outputs)) {
                                const entry = refResource.outputs[key];
                                const value = tools_1.compileHandlebarsTemplateString((_a = entry.bicepVariable) !== null && _a !== void 0 ? _a : "", inputs);
                                this.templateContext[ref].outputs[key] = value;
                            }
                        }
                    }
                    catch (e) { }
                }
                this.templateContext.componentName = inputs.componentName;
                const modulePath = path.join(folder_1.getTemplatesFolder(), "bicep", `${this.bicepModuleName}.config.module.bicep`);
                let module = await fs_extra_1.default.readFile(modulePath, "utf-8");
                module = tools_1.compileHandlebarsTemplateString(module, this.templateContext);
                const templatesFolder = await utils_1.getProjectTemplatesFolderPath(inputs.projectPath);
                const moduleFilePath = path.join(templatesFolder, "azure", "teamsFx", `${this.bicepModuleName}Config.bicep`);
                const moduleFilePathExists = await fs_extra_1.default.pathExists(moduleFilePath);
                const orchPath = path.join(folder_1.getTemplatesFolder(), "bicep", `${this.bicepModuleName}.config.orchestration.bicep`);
                // orchestration part will be added only for first time
                const orch = moduleFilePathExists
                    ? undefined
                    : tools_1.compileHandlebarsTemplateString(await fs_extra_1.default.readFile(orchPath, "utf-8"), this.templateContext);
                const moduleName = (_b = this.bicepModuleName + inputs.componentName) !== null && _b !== void 0 ? _b : "";
                const bicep = {
                    type: "bicep",
                    Configuration: {
                        Modules: { [`${moduleName}Config`]: module },
                        Orchestration: update ? undefined : orch,
                    },
                };
                return teamsfx_api_1.ok([bicep]);
            },
        };
        return teamsfx_api_1.ok(action);
    }
}
exports.AzureResourceConfig = AzureResourceConfig;
//# sourceMappingURL=azureResourceConfig.js.map