"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.FxPreProvisionAction = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const localizeUtils_1 = require("../../common/localizeUtils");
const projectSettingsHelperV3_1 = require("../../common/projectSettingsHelperV3");
const ResourceGroupHelper_1 = require("../../plugins/solution/fx-solution/utils/ResourceGroupHelper");
const provision_1 = require("../../plugins/solution/fx-solution/v3/provision");
const constants_1 = require("../constants");
class FxPreProvisionAction {
    constructor() {
        this.name = "fx.preProvision";
        this.type = "function";
    }
    async execute(context, inputs) {
        const ctx = context;
        const envInfo = ctx.envInfo;
        // 1. check M365 tenant
        envInfo.state[constants_1.ComponentNames.AppManifest] = envInfo.state[constants_1.ComponentNames.AppManifest] || {};
        envInfo.state.solution = envInfo.state.solution || {};
        const appManifest = envInfo.state[constants_1.ComponentNames.AppManifest];
        const solutionConfig = envInfo.state.solution;
        solutionConfig.provisionSucceeded = false;
        const tenantIdInConfig = appManifest.tenantId;
        const tenantIdInTokenRes = await provision_1.getM365TenantId(ctx.tokenProvider.m365TokenProvider);
        if (tenantIdInTokenRes.isErr()) {
            return teamsfx_api_1.err(tenantIdInTokenRes.error);
        }
        const tenantIdInToken = tenantIdInTokenRes.value;
        if (tenantIdInConfig && tenantIdInToken && tenantIdInToken !== tenantIdInConfig) {
            return teamsfx_api_1.err(new teamsfx_api_1.UserError("Solution", "TeamsAppTenantIdNotRight", localizeUtils_1.getLocalizedString("error.M365AccountNotMatch", envInfo.envName)));
        }
        if (!tenantIdInConfig) {
            appManifest.tenantId = tenantIdInToken;
            solutionConfig.teamsAppTenantId = tenantIdInToken;
        }
        // 3. check Azure configs
        if (projectSettingsHelperV3_1.hasAzureResourceV3(ctx.projectSetting) && envInfo.envName !== "local") {
            // ask common question and fill in solution config
            const solutionConfigRes = await provision_1.fillInAzureConfigs(ctx, inputs, envInfo, ctx.tokenProvider);
            if (solutionConfigRes.isErr()) {
                return teamsfx_api_1.err(solutionConfigRes.error);
            }
            // ask for provision consent
            const consentResult = await provision_1.askForProvisionConsent(ctx, ctx.tokenProvider.azureAccountProvider, envInfo);
            if (consentResult.isErr()) {
                return teamsfx_api_1.err(consentResult.error);
            }
            // create resource group if needed
            if (solutionConfig.needCreateResourceGroup) {
                const createRgRes = await ResourceGroupHelper_1.resourceGroupHelper.createNewResourceGroup(solutionConfig.resourceGroupName, ctx.tokenProvider.azureAccountProvider, solutionConfig.subscriptionId, solutionConfig.location);
                if (createRgRes.isErr()) {
                    return teamsfx_api_1.err(createRgRes.error);
                }
            }
        }
        return teamsfx_api_1.ok([]);
    }
}
exports.FxPreProvisionAction = FxPreProvisionAction;
//# sourceMappingURL=preProvisionAction.js.map