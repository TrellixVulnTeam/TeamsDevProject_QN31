"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isMiniApp = exports.hasSQL = exports.hasKeyVault = exports.hasAPIM = exports.hasSPFxTab = exports.hasAzureResourceV3 = exports.hasSimpleAuth = exports.hasFunction = exports.hasAAD = exports.hasFunctionBot = exports.hasBot = exports.hasAzureTab = exports.hasTab = exports.validateProjectSettings = void 0;
const constants_1 = require("../component/constants");
const workflow_1 = require("../component/workflow");
function validateProjectSettings(projectSettings) {
    if (!projectSettings)
        return "empty projectSettings";
    const components = projectSettings.components;
    if (!components)
        return "components is undefined";
    return undefined;
}
exports.validateProjectSettings = validateProjectSettings;
function hasTab(projectSettings) {
    const components = projectSettings.components;
    return components.filter((c) => c.name === constants_1.ComponentNames.TeamsTab).length > 0;
}
exports.hasTab = hasTab;
function hasAzureTab(projectSettings) {
    const tab = workflow_1.getComponent(projectSettings, constants_1.ComponentNames.TeamsTab);
    return tab !== undefined && tab.hosting !== constants_1.ComponentNames.SPFx;
}
exports.hasAzureTab = hasAzureTab;
function hasBot(projectSettings) {
    const components = projectSettings.components;
    return components.filter((c) => c.name === constants_1.ComponentNames.TeamsBot).length > 0;
}
exports.hasBot = hasBot;
function hasFunctionBot(projectSettings) {
    const botComponent = workflow_1.getComponent(projectSettings, constants_1.ComponentNames.TeamsBot);
    if (!botComponent)
        return false;
    return botComponent.hosting === constants_1.ComponentNames.Function;
}
exports.hasFunctionBot = hasFunctionBot;
function hasAAD(projectSettings) {
    const components = projectSettings.components;
    return components.filter((c) => c.name === constants_1.ComponentNames.AadApp).length > 0;
}
exports.hasAAD = hasAAD;
function hasFunction(projectSettings) {
    const components = projectSettings.components;
    return components.filter((c) => c.name === constants_1.ComponentNames.Function).length > 0;
}
exports.hasFunction = hasFunction;
function hasSimpleAuth(projectSettings) {
    const components = projectSettings.components;
    return components.filter((c) => c.name === constants_1.ComponentNames.SimpleAuth).length > 0;
}
exports.hasSimpleAuth = hasSimpleAuth;
function hasAzureResourceV3(projectSetting, excludeAad = false) {
    const azureResources = [
        constants_1.ComponentNames.APIM,
        constants_1.ComponentNames.AzureWebApp,
        constants_1.ComponentNames.Function,
        constants_1.ComponentNames.Identity,
        constants_1.ComponentNames.KeyVault,
        constants_1.ComponentNames.AzureSQL,
        constants_1.ComponentNames.AzureStorage,
    ];
    if (!excludeAad) {
        azureResources.push(constants_1.ComponentNames.AadApp);
    }
    const filtered = projectSetting.components.filter((c) => azureResources.includes(c.name));
    return filtered.length > 0;
}
exports.hasAzureResourceV3 = hasAzureResourceV3;
function hasSPFxTab(projectSetting) {
    const tab = workflow_1.getComponent(projectSetting, constants_1.ComponentNames.TeamsTab);
    return (tab === null || tab === void 0 ? void 0 : tab.hosting) === constants_1.ComponentNames.SPFx;
}
exports.hasSPFxTab = hasSPFxTab;
function hasAPIM(projectSettings) {
    return workflow_1.getComponent(projectSettings, constants_1.ComponentNames.APIM) !== undefined;
}
exports.hasAPIM = hasAPIM;
function hasKeyVault(projectSettings) {
    return workflow_1.getComponent(projectSettings, constants_1.ComponentNames.KeyVault) !== undefined;
}
exports.hasKeyVault = hasKeyVault;
function hasSQL(projectSettings) {
    return workflow_1.getComponent(projectSettings, constants_1.ComponentNames.AzureSQL) !== undefined;
}
exports.hasSQL = hasSQL;
function isMiniApp(projectSettings) {
    if (!projectSettings.components || projectSettings.components.length === 0)
        return true;
    // Scenario: SSO is added to existing tab app
    if (projectSettings.components.length === 1 && hasAAD(projectSettings)) {
        return true;
    }
    return false;
}
exports.isMiniApp = isMiniApp;
//# sourceMappingURL=projectSettingsHelperV3.js.map