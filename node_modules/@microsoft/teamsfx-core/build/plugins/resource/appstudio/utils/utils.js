"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RetryHandler = exports.renderTemplate = exports.convertToAppDefinitionMessagingExtensions = exports.convertToAppDefinitionBots = exports.convertToAppDefinition = exports.getLocalAppName = exports.getCustomizedKeys = exports.checkAndConfig = exports.replaceConfigValue = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const mustache_1 = tslib_1.__importDefault(require("mustache"));
const constants_1 = require("../constants");
const localizeUtils_1 = require("../../../../common/localizeUtils");
const results_1 = require("../results");
function replaceConfigValue(config, id, value) {
    if (config && id && value) {
        const idTag = `{${id}}`;
        while (config.includes(idTag)) {
            config = config.replace(idTag, value);
        }
    }
    return config;
}
exports.replaceConfigValue = replaceConfigValue;
/**
 *
 * @throws Error - when placeholder doesn't have corresponding value
 */
function checkAndConfig(config, id, value) {
    const idTag = `{${id}}`;
    if (value) {
        return replaceConfigValue(config, id, value);
    }
    else {
        if (config.includes(idTag)) {
            throw results_1.AppStudioResultFactory.SystemError("RequiredDataMissing", [
                localizeUtils_1.getDefaultString("plugins.appstudio.dataRequired", idTag),
                localizeUtils_1.getLocalizedString("plugins.appstudio.dataRequired", idTag),
            ]);
        }
        else {
            return config;
        }
    }
}
exports.checkAndConfig = checkAndConfig;
function getCustomizedKeys(prefix, manifest) {
    let keys = [];
    for (const key in manifest) {
        if (manifest.hasOwnProperty(key)) {
            const value = manifest[key];
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.map((item, index) => {
                        keys = keys.concat(getCustomizedKeys(`${prefix}.${key}[${index}]`, item));
                    });
                }
                else {
                    keys = keys.concat(getCustomizedKeys(`${prefix}.${key}`, value));
                }
            }
            else if (typeof value === "string" && value.startsWith("{{config.manifest")) {
                keys.push(`${prefix}.${key}`);
            }
        }
    }
    return keys;
}
exports.getCustomizedKeys = getCustomizedKeys;
function getLocalAppName(appName) {
    const suffix = "-local-debug";
    if (suffix.length + appName.length <= constants_1.TEAMS_APP_SHORT_NAME_MAX_LENGTH) {
        appName = appName + suffix;
    }
    return appName;
}
exports.getLocalAppName = getLocalAppName;
/**
 * Convert from TeamsAppManifest to AppDefinition
 * Localization file is not included
 * @param appManifest
 * @returns
 */
function convertToAppDefinition(appManifest) {
    var _a, _b, _c, _d, _e;
    const appDefinition = {
        appName: appManifest.name.short,
        validDomains: appManifest.validDomains,
    };
    appDefinition.showLoadingIndicator = appManifest.showLoadingIndicator;
    appDefinition.isFullScreen = appManifest.isFullScreen;
    appDefinition.appId = appManifest.id;
    appDefinition.appName = appManifest.name.short;
    appDefinition.shortName = appManifest.name.short;
    appDefinition.longName = appManifest.name.full;
    appDefinition.manifestVersion = appManifest.manifestVersion;
    appDefinition.version = appManifest.version;
    appDefinition.packageName = appManifest.packageName;
    appDefinition.accentColor = appManifest.accentColor;
    appDefinition.developerName = appManifest.developer.name;
    appDefinition.mpnId = appManifest.developer.mpnId;
    appDefinition.websiteUrl = appManifest.developer.websiteUrl;
    appDefinition.privacyUrl = appManifest.developer.privacyUrl;
    appDefinition.termsOfUseUrl = appManifest.developer.termsOfUseUrl;
    appDefinition.shortDescription = appManifest.description.short;
    appDefinition.longDescription = appManifest.description.full;
    appDefinition.staticTabs = (_a = appManifest.staticTabs) === null || _a === void 0 ? void 0 : _a.map((x) => {
        var _a, _b, _c, _d;
        return {
            objectId: x.objectId,
            entityId: x.entityId,
            name: (_a = x.name) !== null && _a !== void 0 ? _a : "",
            contentUrl: (_b = x.contentUrl) !== null && _b !== void 0 ? _b : "",
            websiteUrl: (_c = x.websiteUrl) !== null && _c !== void 0 ? _c : "",
            scopes: x.scopes,
            context: (_d = x.context) !== null && _d !== void 0 ? _d : [],
        };
    });
    appDefinition.configurableTabs = (_b = appManifest.configurableTabs) === null || _b === void 0 ? void 0 : _b.map((x) => {
        var _a, _b, _c, _d;
        return {
            objectId: x.objectId,
            configurationUrl: x.configurationUrl,
            canUpdateConfiguration: (_a = x.canUpdateConfiguration) !== null && _a !== void 0 ? _a : false,
            scopes: x.scopes,
            context: (_b = x.context) !== null && _b !== void 0 ? _b : [],
            sharePointPreviewImage: (_c = x.sharePointPreviewImage) !== null && _c !== void 0 ? _c : "",
            supportedSharePointHosts: (_d = x.supportedSharePointHosts) !== null && _d !== void 0 ? _d : [],
        };
    });
    appDefinition.bots = convertToAppDefinitionBots(appManifest);
    appDefinition.messagingExtensions = convertToAppDefinitionMessagingExtensions(appManifest);
    appDefinition.connectors = (_c = appManifest.connectors) === null || _c === void 0 ? void 0 : _c.map((x) => {
        var _a;
        return {
            connectorId: x.connectorId,
            configurationUrl: (_a = x.configurationUrl) !== null && _a !== void 0 ? _a : "",
            name: "",
            scopes: x.scopes,
        };
    });
    appDefinition.graphConnector = appManifest.graphConnector;
    appDefinition.devicePermissions = appManifest.devicePermissions;
    if (appManifest.webApplicationInfo) {
        appDefinition.webApplicationInfoId = appManifest.webApplicationInfo.id;
        appDefinition.webApplicationInfoResource = appManifest.webApplicationInfo.resource;
    }
    appDefinition.activities = {
        activityTypes: (_e = (_d = appManifest.activities) === null || _d === void 0 ? void 0 : _d.activityTypes) !== null && _e !== void 0 ? _e : [],
    };
    if (appManifest.icons.color) {
        appDefinition.colorIcon = appManifest.icons.color;
    }
    if (appManifest.icons.outline) {
        appDefinition.outlineIcon = appManifest.icons.outline;
    }
    return appDefinition;
}
exports.convertToAppDefinition = convertToAppDefinition;
function convertToAppDefinitionBots(appManifest) {
    const bots = [];
    if (appManifest.bots) {
        appManifest.bots.forEach((manBot) => {
            var _a, _b, _c, _d, _e;
            const teamCommands = [];
            const groupCommands = [];
            const personalCommands = [];
            (_a = manBot === null || manBot === void 0 ? void 0 : manBot.commandLists) === null || _a === void 0 ? void 0 : _a.forEach((list) => {
                list.commands.forEach((command) => {
                    teamCommands.push({
                        title: command.title,
                        description: command.description,
                    });
                    groupCommands.push({
                        title: command.title,
                        description: command.description,
                    });
                    personalCommands.push({
                        title: command.title,
                        description: command.description,
                    });
                });
            });
            const bot = {
                botId: manBot.botId,
                isNotificationOnly: (_b = manBot.isNotificationOnly) !== null && _b !== void 0 ? _b : false,
                supportsFiles: (_c = manBot.supportsFiles) !== null && _c !== void 0 ? _c : false,
                supportsCalling: (_d = manBot.supportsCalling) !== null && _d !== void 0 ? _d : false,
                supportsVideo: (_e = manBot.supportsVideo) !== null && _e !== void 0 ? _e : false,
                scopes: manBot.scopes,
                teamCommands: teamCommands,
                groupChatCommands: groupCommands,
                personalCommands: personalCommands,
                needsChannelSelector: false,
            };
            bots.push(bot);
        });
    }
    return bots;
}
exports.convertToAppDefinitionBots = convertToAppDefinitionBots;
function convertToAppDefinitionMessagingExtensions(appManifest) {
    const messagingExtensions = [];
    if (appManifest.composeExtensions) {
        appManifest.composeExtensions.forEach((ext) => {
            var _a, _b;
            const me = {
                botId: ext.botId,
                canUpdateConfiguration: true,
                commands: ext.commands.map((x) => {
                    var _a, _b, _c, _d, _e, _f, _g;
                    return {
                        id: x.id,
                        type: (_a = x.type) !== null && _a !== void 0 ? _a : "query",
                        title: x.title,
                        description: (_b = x.description) !== null && _b !== void 0 ? _b : "",
                        initialRun: (_c = x.initialRun) !== null && _c !== void 0 ? _c : false,
                        fetchTask: (_d = x.fetchTask) !== null && _d !== void 0 ? _d : false,
                        context: (_e = x.context) !== null && _e !== void 0 ? _e : ["compose", "commandBox"],
                        parameters: (_g = (_f = x.parameters) === null || _f === void 0 ? void 0 : _f.map((p) => {
                            var _a, _b, _c;
                            return {
                                name: p.name,
                                title: p.title,
                                description: (_a = p.description) !== null && _a !== void 0 ? _a : "",
                                inputType: (_b = p.inputType) !== null && _b !== void 0 ? _b : "text",
                                choices: (_c = p.choices) !== null && _c !== void 0 ? _c : [],
                            };
                        })) !== null && _g !== void 0 ? _g : [],
                        taskInfo: x.taskInfo,
                    };
                }),
                messageHandlers: (_b = (_a = ext.messageHandlers) === null || _a === void 0 ? void 0 : _a.map((h) => {
                    var _a;
                    return {
                        type: h.type,
                        value: {
                            domains: (_a = h.value.domains) !== null && _a !== void 0 ? _a : [],
                        },
                    };
                })) !== null && _b !== void 0 ? _b : [],
            };
            messagingExtensions.push(me);
        });
    }
    return messagingExtensions;
}
exports.convertToAppDefinitionMessagingExtensions = convertToAppDefinitionMessagingExtensions;
function renderTemplate(manifestString, view) {
    // Unesacped HTML
    mustache_1.default.escape = (value) => value;
    manifestString = mustache_1.default.render(manifestString, view);
    return manifestString;
}
exports.renderTemplate = renderTemplate;
class RetryHandler {
    static async Retry(fn) {
        var _a;
        let retries = 6;
        let response;
        while (retries > 0) {
            retries = retries - 1;
            try {
                response = await fn();
                return response;
            }
            catch (e) {
                // Directly throw 404 error, keep trying for other status code e.g. 503 400
                if (retries <= 0 || ((_a = e.response) === null || _a === void 0 ? void 0 : _a.status) == 404) {
                    throw e;
                }
                else {
                    await new Promise((resolve) => setTimeout(resolve, 5000));
                }
            }
        }
    }
}
exports.RetryHandler = RetryHandler;
//# sourceMappingURL=utils.js.map